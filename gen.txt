@:commutative @:op(A + B) private static inline function add$(a:IntegerTypeInt, b:Go$):Go$
    return Go$.ofInt(a) + b;
@:op(A - B) private static inline function subl$(a:IntegerTypeInt, b:Go$):Go$
    return Go$.ofInt(a) - b;
@:op(A - B) private static inline function subr$(a:Go$,b:IntegerTypeInt):Go$
    return a - Go$.ofInt(b);
@:op(A * B) private static inline function mul$(b:Go$,a:IntegerTypeInt):Go$
    return b * Go$.ofInt(a);
@:op(A / B) private static inline function divl$(a:IntegerTypeInt,b:Go$):Go$
    return Go$.ofInt(a) / b;
@:op(A / B) private static inline function divr$(a:Go$,b:IntegerTypeInt):Go$
    return b / Go$.ofInt(b);
@:commutative @:op(A | B) private static inline function or$(a:IntegerTypeInt,b:Go$):Go$
    return Go$.ofInt(a) | b;
@:commutative @:op(A ^ B) private static inline function xor$(a:IntegerTypeInt,b:Go$):Go$
    return Go$.ofInt(a) ^ b;
@:commutative @:op(A & B) private static inline function and$(a:IntegerTypeInt,b:Go$):Go$
    return Go$.ofInt(a) & b;
@:commutative @:op(A >> B) private static inline function shl$(a:IntegerTypeInt,b:Go$):Go$
    return Go$.ofInt(a) << b;
@:commutative @:op(A << B) private static inline function shr$(a:IntegerTypeInt,b:Go$):Go$
    return Go$.ofInt(a) << b;
@:commutative @:op(A % B) private static inline function mod$(a:IntegerTypeInt,b:Go$):Go$
    return Go$.ofInt(a) % b;
@:op(A > B) private static inline function gtl$(a:IntegerTypeInt,b:Go$):Bool
    return Go$.ofInt(a) > b;
@:op(A > B) private static inline function gtr$(a:Go$,b:IntegerTypeInt):Bool
    return a > Go$.ofInt(b);
@:op(A >= B) private static inline function gtel$(a:IntegerTypeInt,b:Go$):Bool
    return Go$.ofInt(a) >= b;
@:op(A >= B) private static inline function gter$(a:Go$,b:IntegerTypeInt):Bool
    return a >= Go$.ofInt(b);
@:op(A < B) private static inline function ltl$(a:IntegerTypeInt,b:Go$):Bool
    return Go$.ofInt(a) < b;
@:op(A < B) private static inline function ltr$(a:Go$,b:IntegerTypeInt):Bool
    return a < Go$.ofInt(b);
@:op(A <= B) private static inline function ltel$(a:IntegerTypeInt,b:Go$):Bool
    return Go$.ofInt(a) <= b;
@:op(A <= B) private static inline function lter$(a:Go$,b:IntegerTypeInt):Bool
    return a <= Go$.ofInt(b);
@:commutative @:op(A != B) private static inline function neq$(a:IntegerTypeInt,b:Go$):Bool
    return Go$.ofInt(a) != b;
@:commutative @:op(A == B) private static inline function eq$(a:IntegerTypeInt,b:Go$):Bool
    return Go$.ofInt(a) == b;


@:op(A >> B) private static function shr(a:Go$,b:Go$):Go$
    return a.toBasic() >> b.toBasic();
@:op(A << B) private static function shl(a:Go$,b:Go$):Go$
    return a.toBasic() << b.toBasic();


    
@:op(A >>> B) private static function ushr(a:Go$,b:Go$):Go$
    return a.toBasic() << b.toBasic();

@:op(A + B) private static function add(a:Go$,b:Go$):Go$
	return a.toBasic() + b.toBasic();
@:op(A - B) private static function sub(a:Go$,b:Go$):Go$
	return a.toBasic() - b.toBasic();
@:op(A * B) private static function mul(a:Go$,b:Go$):Go$
	return a.toBasic() * b.toBasic();
@:op(A & B) private static function and(a:Go$,b:Go$):Go$
	return a.toBasic() & b.toBasic();
@:op(A | B) private static function or(a:Go$,b:Go$):Go$
	return a.toBasic() | b.toBasic();
@:op(A ^ B) private static function xor(a:Go$,b:Go$):Go$
	return a.toBasic() ^ b.toBasic();
@:op(A % B) private static function mod(a:Go$,b:Go$):Go$
	return a.toBasic() % b.toBasic();
@:op(A / B) private static function div(a:Go$,b:Go$):Go$
    return Std.int(a.toBasic() / b.toBasic());

@:op(A > B) private static function gt(a:Go$,b:Go$):Bool
    return a.toBasic() > b.toBasic();
@:op(A >= B) private static function gte(a:Go$,b:Go$):Bool
    return a.toBasic() >= b.toBasic();
@:op(A < B) private static function lt(a:Go$,b:Go$):Bool
    return a.toBasic() < b.toBasic();
@:op(A <= B) private static function lte(a:Go$,b:Go$):Bool
    return a.toBasic() <= b.toBasic();